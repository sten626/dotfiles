# shellcheck shell=bash

git_details() {
  local modifier=''
  local branch_name=''

  # Bail out if not in a git repository.
  git rev-parse --is-inside-work-tree &>/dev/null || return

  # Try to get the branch name of the branch we're on.
  branch_name="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
    git describe --all --exact-match HEAD 2> /dev/null || \
    git rev-parse --short HEAD 2> /dev/null || \
    echo '(unknown)')"

  # Check for uncommitted changes in the index.
  if ! git diff --quiet --ignore-submodules --cached; then
    modifier+='+'
  fi

  # Check for unstaged changes.
  if ! git diff-files --quiet --ignore-submodules; then
    modifier+='!'
  fi

  # Check for untracked files.
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    modifier+='?'
  fi

  # Check for stashed files.
  if git rev-parse --verify refs/stash &> /dev/null; then
    modifier+='$'
  fi

  [ -n "$modifier" ] && modifier=" [$modifier]"

  echo -e "${1}${branch_name}${2}${modifier}"
}

set_prompts() {
  tput sgr0; # reset styles

  local bold=""
  local reset=""
  local black=""
  local blue=""
  local blue_bg=""
  local magenta=""
  local cyan=""
  local white=""

  bold=$(tput bold)
  reset=$(tput sgr0)
  black=$(tput setaf 0)
  blue=$(tput setaf 4)
  blue_bg=$(tput setab 4)
  magenta=$(tput setaf 5)
  cyan=$(tput setaf 6)
  white=$(tput setaf 7)

  # Highight the hostname when connected via SSH.
  if [[ "$SSH_TTY" ]]; then
    host_style="${blue_bg}${black}";
  else
    host_style="$cyan";
  fi

  # Set the terminal title and prompt.
  PS1="\[\033]0;\W\007\]"
  PS1+="\[$bold$cyan\]\u"
  PS1+="\[$white\] at "
  PS1+="\[$host_style\]\h"
  PS1+="\[$white\] in "
  PS1+="\[$blue\]\w"
  PS1+="\$(git_details \"\[$white\] on \[$blue\]\" \"\[$magenta\]\")"
  PS1+="\n\[$white\]\$ \[$reset\]"
  export PS1

  export PS2="\[$bold$blue\]â†’ \[$reset\]"
}

set_prompts

unset -f set_prompts
