#!/bin/bash

enable_colour_support() {
    export TERM="xterm-256color"

    # Enable colour support

    if [ -x /usr/bin/dircolors ]; then
        if [ -r ~/.dircolors ]; then
            eval "$(dircolors -b ~/.dircolors)"
        else
            eval "$(dircolors -b)"
        fi

        alias dir="dir --color=auto"
        alias egrep="egrep --color=auto"
        alias fgrep="fgrep --color=auto"
        alias grep="grep --color=auto"
        alias ls="ls --color=auto"
        alias vdir="vdir --color=auto"
    fi
}

get_git_repository_details() {
    local branchName=""
    local count=""
    local tmp=""

    # Check if the current directory is in a Git repository.
    ! git rev-parse &> /dev/null \
        && return

    # Check if in `.git/` directory.
    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] \
        && return

    # Check for uncommitted changes.
    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+"
    fi

    # Check for unstaged changes.
    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!"
    fi

    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?"
    fi

    # Check for stashed files.
    if git rev-parse --verify refs/stash &> /dev/null; then
        tmp="$tmp$"
    fi

    # Check if ahead/behind upstream.
    count="$(git rev-list --count --left-right "@{upstream}"...HEAD 2> /dev/null)"

    # Check that there was an upstream.
    if [ ! -z "$count" ]; then
        if [[ $count == 0?0 ]]; then
            # Equal to upsteam.
            tmp="$tmp="
        elif [[ $count == 0* ]]; then
            # Ahead of upstream.
            tmp="$tmp>"
        elif [[ $count == *0 ]]; then
            # Behind upstream.
            tmp="$tmp<"
        else
            # Diverged from upstream
            tmp="$tmp<>"
        fi
    fi

    [ -n "$tmp" ] \
        && tmp=" [$tmp]"

    branchName="$(printf "%s" "$(git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unkown)" )" | tr -d "\n")"

    printf "%s" "$1$branchName$tmp"
}

set_prompts() {
    local bold=""
    local reset=""

    local blue=""
    local cyan=""
    local green=""
    local violet=""
    local white=""

    bold=$(tput bold 2> /dev/null)
    reset=$(tput sgr0 2> /dev/null)

    if [ "$(tput colors 2> /dev/null || printf "0")" -ge 256 ]; then
        # Solarized colors.
        # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values

        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        violet=$(tput setaf 61)
        white=$(tput setaf 15)
    fi

    # Prompt Statement variables.
    # http://ss64.com/bash/syntax-prompt.html

    # PS1 - Default interactive prompt

    PS1="\[\033]0;\W - Terminal\007\]" # Terminal title (cwd)

    PS1+="\[$reset$bold"
    PS1+="$green\]\u"        # Username
    PS1+="\[$white\]@"
    PS1+="\[$cyan\]\h"        # Host
    PS1+="\[$white\]: "
    PS1+="\[$blue\]\w"         # Working directory
    PS1+="\$(get_git_repository_details \"$white on $violet\")"
    PS1+="\n"
    PS1+="\[$reset$white\]$ \[$reset\]"

    export PS1

    # PS2 - Continuation interactive prompt

    PS2="âš¡ "

    export PS2

    # PS4 - Debug prompt

    PS4="+$(tput cr 2> /dev/null;
            tput cuf 6 2> /dev/null;
            printf "%s" "$reset")"

    export PS4
}

main() {
    enable_colour_support
    set_prompts
}

main

# Cleanup

unset -f enable_colour_support
unset -f main
unset -f set_prompts
