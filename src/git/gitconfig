[alias]

    a = commit --amend
    br = branch
    c = commit
    ca = !git add -A && git commit              # Commit all changes.
    co = checkout
    cp = cherry-pick
    d = diff
    dc = diff --cached
    f = fetch
    g = log --graph --pretty=custom             # Show custom graph.
    git = !exec git                             # Allow `$ git git git...`
    l = log --pretty=custom                     # Show custom log.
    lc = shortlog --email --numbered --summary  # List contributors.
    p = push
    r = rebase
    s = status
    w = instaweb --httpd=webrick                # Start web-based visualizer.

    # Find commits by source code.
    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # List remote branches.
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # Remove the tag with the specified tag name if it exists and tag the latest commit with that name.
    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # Remove last commits (by default removes the last commit)
    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # Undo last commits (by default undoes the last commit)
    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow

    new = green
    old = red

    newMoved = green
    oldMoved = red

[core]

    abbrev = 12
    attributesfile = ~/.gitattributes
    autocrlf = input
    editor = vim
    excludesfile = ~/.gitignore

[diff]

    colorMoved = zebra

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             │
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads, or tags)
    #                     └─ hash (abbreviated)

[push]

    followTags = true

[user]

    # Store user specific info in `~/.gitconfig.local`
    useConfigOnly = true

[include]

    # Load local config
    path = ~/.gitconfig.local
